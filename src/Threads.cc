/*
 * --- GSMP-COPYRIGHT-NOTE-BEGIN ---
 * 
 * This copyright note is auto-generated by ./scripts/Create-CopyPatch.
 * Please add additional copyright information _after_ the line containing
 * the GSMP-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
 * the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
 * 
 * GSMP: utility/src/Threads.cc
 * General Sound Manipulation Program is Copyright (C) 2000 - 2003
 *   Valentin Ziegler and René Rebe
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2. A copy of the GNU General
 * Public License can be found in the file LICENSE.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANT-
 * ABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 * 
 * --- GSMP-COPYRIGHT-NOTE-END ---
 */

#include <unistd.h>

#include "Threads.hh"

using namespace Utility::Threads;

MutexAttr Mutex::Default = {0};
CondAttr Condition::Default = {0};
ThreadAttr Thread::Default = {0};

void Semaphore::up()
{
  access_.lock();
  value_++;
  access_.unlock();
  sig_.signal();
}

void Semaphore::down()
{
  access_.lock();
  while (value_<1)
    {sig_.wait(access_);}
  value_--;
  access_.unlock();
}

Thread::Thread (const ThreadAttr &attr)
  : attr_(attr)
{
}

Thread::~Thread ()
{
}

int Thread::detach ()
{
  return pthread_detach (thread_);
}

void* Thread::join ()
{
  void* thread_return_;
  if (pthread_join (thread_, &thread_return_) == 0)
    return thread_return_;
  else
    return 0;
}

int Thread::start (void* arg)
{
  arg_ = arg; // save the arg for the static trampoline

  Thread *t = this;
  return pthread_create (&thread_, attr_.impl_, call_main_static_, t);
}

void* Thread::call_main_ (void* arg)
{
  void* return_;
  return_ = main (arg);
  pthread_exit (return_);
}

void* Thread::call_main_static_ (void* obj)
{
  Thread *thread = (Thread*)obj;
  return thread->call_main_ (thread->arg_);
}
